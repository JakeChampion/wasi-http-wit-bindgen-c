// Generated by `wit-bindgen` 0.13.1. DO NOT EDIT!
#ifndef __BINDINGS_TEST_WASI_HTTP_H
#define __BINDINGS_TEST_WASI_HTTP_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>

typedef struct {
  uint8_t*ptr;
  size_t len;
} test_wasi_http_string_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_pollable_t;

typedef struct {
  test_wasi_http_borrow_pollable_t *ptr;
  size_t len;
} test_wasi_http_list_borrow_pollable_t;

typedef struct {
  uint32_t *ptr;
  size_t len;
} test_wasi_http_list_u32_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_error_t;

// An error for input-stream and output-stream operations.
typedef struct {
  uint8_t tag;
  union {
    test_wasi_http_own_error_t last_operation_failed;
  } val;
} wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t;

// The last operation (a write or flush) failed before completion.
// 
// More information is available in the `error` payload.
#define WASI_IO_0_2_0_RC_2023_11_05_STREAMS_STREAM_ERROR_LAST_OPERATION_FAILED 0
// The stream is closed: no more input will be accepted by the
// stream. A closed output-stream will return this error on all
// future operations.
#define WASI_IO_0_2_0_RC_2023_11_05_STREAMS_STREAM_ERROR_CLOSED 1

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_error_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_input_stream_t;

typedef struct {
  uint8_t *ptr;
  size_t len;
} test_wasi_http_list_u8_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_output_stream_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_pollable_t;

// An instant in time, in nanoseconds. An instant is relative to an
// unspecified initial value, and can only be compared to instances from
// the same monotonic-clock.
typedef uint64_t wasi_clocks_0_2_0_rc_2023_11_05_monotonic_clock_instant_t;

// A duration of time, in nanoseconds.
typedef uint64_t wasi_clocks_0_2_0_rc_2023_11_05_monotonic_clock_duration_t;

// A time and date in seconds plus nanoseconds.
typedef struct {
  uint64_t seconds;
  uint32_t nanoseconds;
} wasi_clocks_0_2_0_rc_2023_11_05_wall_clock_datetime_t;

typedef wasi_clocks_0_2_0_rc_2023_11_05_wall_clock_datetime_t wasi_clocks_0_2_0_rc_2023_11_05_timezone_datetime_t;

// Information useful for displaying the timezone of a specific `datetime`.
// 
// This information may vary within a single `timezone` to reflect daylight
// saving time adjustments.
typedef struct {
  // The number of seconds difference between UTC time and the local
  // time of the timezone.
  // 
  // The returned value will always be less than 86400 which is the
  // number of seconds in a day (24*60*60).
  // 
  // In implementations that do not expose an actual time zone, this
  // should return 0.
  int32_t utc_offset;
  // The abbreviated name of the timezone to display to a user. The name
  // `UTC` indicates Coordinated Universal Time. Otherwise, this should
  // reference local standards for the name of the time zone.
  // 
  // In implementations that do not expose an actual time zone, this
  // should be the string `UTC`.
  // 
  // In time zones that do not have an applicable name, a formatted
  // representation of the UTC offset may be returned, such as `-04:00`.
  test_wasi_http_string_t name;
  // Whether daylight saving time is active.
  // 
  // In implementations that do not expose an actual time zone, this
  // should return false.
  bool in_daylight_saving_time;
} wasi_clocks_0_2_0_rc_2023_11_05_timezone_timezone_display_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_input_stream_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_output_stream_t;

typedef wasi_clocks_0_2_0_rc_2023_11_05_monotonic_clock_duration_t wasi_http_0_2_0_rc_2023_11_05_types_duration_t;

// This type corresponds to HTTP standard Methods.
typedef struct {
  uint8_t tag;
  union {
    test_wasi_http_string_t other;
  } val;
} wasi_http_0_2_0_rc_2023_11_05_types_method_t;

#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_METHOD_GET 0
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_METHOD_HEAD 1
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_METHOD_POST 2
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_METHOD_PUT 3
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_METHOD_DELETE 4
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_METHOD_CONNECT 5
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_METHOD_OPTIONS 6
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_METHOD_TRACE 7
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_METHOD_PATCH 8
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_METHOD_OTHER 9

// This type corresponds to HTTP standard Related Schemes.
typedef struct {
  uint8_t tag;
  union {
    test_wasi_http_string_t other;
  } val;
} wasi_http_0_2_0_rc_2023_11_05_types_scheme_t;

#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_SCHEME_HTTP 0
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_SCHEME_HTTPS 1
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_SCHEME_OTHER 2

// TODO: perhaps better align with HTTP semantics?
// This type enumerates the different kinds of errors that may occur when
// initially returning a response.
typedef struct {
  uint8_t tag;
  union {
    test_wasi_http_string_t invalid_url;
    test_wasi_http_string_t timeout_error;
    test_wasi_http_string_t protocol_error;
    test_wasi_http_string_t unexpected_error;
  } val;
} wasi_http_0_2_0_rc_2023_11_05_types_error_t;

#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_ERROR_INVALID_URL 0
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_ERROR_TIMEOUT_ERROR 1
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_ERROR_PROTOCOL_ERROR 2
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_ERROR_UNEXPECTED_ERROR 3

// This tyep enumerates the different kinds of errors that may occur when
// setting or appending to a `fields` resource.
typedef struct {
  uint8_t tag;
} wasi_http_0_2_0_rc_2023_11_05_types_header_error_t;

#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_HEADER_ERROR_INVALID_SYNTAX 0
#define WASI_HTTP_0_2_0_RC_2023_11_05_TYPES_HEADER_ERROR_FORBIDDEN 1

// Field keys are always strings.
typedef test_wasi_http_string_t wasi_http_0_2_0_rc_2023_11_05_types_field_key_t;

// Field values should always be ASCII strings. However, in
// reality, HTTP implementations often have to interpret malformed values,
// so they are provided as a list of bytes.
typedef struct {
  uint8_t *ptr;
  size_t len;
} wasi_http_0_2_0_rc_2023_11_05_types_field_value_t;

// This type corresponds to the HTTP standard Status Code.
typedef uint16_t wasi_http_0_2_0_rc_2023_11_05_types_status_code_t;

typedef struct {
  wasi_http_0_2_0_rc_2023_11_05_types_field_key_t f0;
  wasi_http_0_2_0_rc_2023_11_05_types_field_value_t f1;
} test_wasi_http_tuple2_wasi_http_0_2_0_rc_2023_11_05_types_field_key_wasi_http_0_2_0_rc_2023_11_05_types_field_value_t;

typedef struct {
  test_wasi_http_tuple2_wasi_http_0_2_0_rc_2023_11_05_types_field_key_wasi_http_0_2_0_rc_2023_11_05_types_field_value_t *ptr;
  size_t len;
} test_wasi_http_list_tuple2_wasi_http_0_2_0_rc_2023_11_05_types_field_key_wasi_http_0_2_0_rc_2023_11_05_types_field_value_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_fields_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_fields_t;

typedef struct {
  wasi_http_0_2_0_rc_2023_11_05_types_field_value_t *ptr;
  size_t len;
} test_wasi_http_list_wasi_http_0_2_0_rc_2023_11_05_types_field_value_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_incoming_request_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_incoming_body_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_outgoing_request_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_outgoing_body_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_request_options_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_outgoing_response_t;

typedef struct {
  bool is_err;
  union {
    test_wasi_http_own_outgoing_response_t ok;
    wasi_http_0_2_0_rc_2023_11_05_types_error_t err;
  } val;
} test_wasi_http_result_own_outgoing_response_wasi_http_0_2_0_rc_2023_11_05_types_error_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_incoming_response_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_incoming_body_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_future_trailers_t;

typedef test_wasi_http_own_fields_t test_wasi_http_own_trailers_t;

typedef struct {
  bool is_some;
  test_wasi_http_own_trailers_t val;
} test_wasi_http_option_own_trailers_t;

typedef struct {
  bool is_err;
  union {
    test_wasi_http_option_own_trailers_t ok;
    wasi_http_0_2_0_rc_2023_11_05_types_error_t err;
  } val;
} test_wasi_http_result_option_own_trailers_wasi_http_0_2_0_rc_2023_11_05_types_error_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_outgoing_response_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_outgoing_body_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_borrow_future_incoming_response_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_incoming_response_t;

typedef struct {
  bool is_err;
  union {
    test_wasi_http_own_incoming_response_t ok;
    wasi_http_0_2_0_rc_2023_11_05_types_error_t err;
  } val;
} test_wasi_http_result_own_incoming_response_wasi_http_0_2_0_rc_2023_11_05_types_error_t;

typedef struct {
  bool is_err;
  union {
    test_wasi_http_result_own_incoming_response_wasi_http_0_2_0_rc_2023_11_05_types_error_t ok;
  } val;
} test_wasi_http_result_result_own_incoming_response_wasi_http_0_2_0_rc_2023_11_05_types_error_void_t;

typedef wasi_http_0_2_0_rc_2023_11_05_types_error_t wasi_http_0_2_0_rc_2023_11_05_outgoing_handler_error_t;

typedef test_wasi_http_own_request_options_t test_wasi_http_own_request_options_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_future_incoming_response_t;

typedef test_wasi_http_own_fields_t test_wasi_http_own_headers_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_outgoing_request_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_response_outparam_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_future_trailers_t;

typedef struct {
  int32_t __handle;
} test_wasi_http_own_incoming_request_t;

// Imported Functions from `wasi:clocks/wall-clock@0.2.0-rc-2023-11-05`
// Read the current value of the clock.
// 
// This clock is not monotonic, therefore calling this function repeatedly
// will not necessarily produce a sequence of non-decreasing values.
// 
// The returned timestamps represent the number of seconds since
// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
// also known as [Unix Time].
// 
// The nanoseconds field of the output is always less than 1000000000.
// 
// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
extern void wasi_clocks_0_2_0_rc_2023_11_05_wall_clock_now(wasi_clocks_0_2_0_rc_2023_11_05_wall_clock_datetime_t *ret);
// Query the resolution of the clock.
// 
// The nanoseconds field of the output is always less than 1000000000.
extern void wasi_clocks_0_2_0_rc_2023_11_05_wall_clock_resolution(wasi_clocks_0_2_0_rc_2023_11_05_wall_clock_datetime_t *ret);

// Imported Functions from `wasi:io/poll@0.2.0-rc-2023-11-05`
// Return the readiness of a pollable. This function never blocks.
// 
// Returns `true` when the pollable is ready, and `false` otherwise.
extern bool wasi_io_0_2_0_rc_2023_11_05_poll_method_pollable_ready(test_wasi_http_borrow_pollable_t self);
// `block` returns immediately if the pollable is ready, and otherwise
// blocks until ready.
// 
// This function is equivalent to calling `poll.poll` on a list
// containing only this pollable.
extern void wasi_io_0_2_0_rc_2023_11_05_poll_method_pollable_block(test_wasi_http_borrow_pollable_t self);
// Poll for completion on a set of pollables.
// 
// This function takes a list of pollables, which identify I/O sources of
// interest, and waits until one or more of the events is ready for I/O.
// 
// The result `list<u32>` contains one or more indices of handles in the
// argument list that is ready for I/O.
// 
// If the list contains more elements than can be indexed with a `u32`
// value, this function traps.
// 
// A timeout can be implemented by adding a pollable from the
// wasi-clocks API to the list.
// 
// This function does not return a `result`; polling in itself does not
// do any I/O so it doesn't fail. If any of the I/O sources identified by
// the pollables has an error, it is indicated by marking the source as
// being reaedy for I/O.
extern void wasi_io_0_2_0_rc_2023_11_05_poll_poll(test_wasi_http_list_borrow_pollable_t *in, test_wasi_http_list_u32_t *ret);

// Imported Functions from `wasi:clocks/monotonic-clock@0.2.0-rc-2023-11-05`
// Read the current value of the clock.
// 
// The clock is monotonic, therefore calling this function repeatedly will
// produce a sequence of non-decreasing values.
extern wasi_clocks_0_2_0_rc_2023_11_05_monotonic_clock_instant_t wasi_clocks_0_2_0_rc_2023_11_05_monotonic_clock_now(void);
// Query the resolution of the clock. Returns the duration of time
// corresponding to a clock tick.
extern wasi_clocks_0_2_0_rc_2023_11_05_monotonic_clock_duration_t wasi_clocks_0_2_0_rc_2023_11_05_monotonic_clock_resolution(void);
// Create a `pollable` which will resolve once the specified instant
// occured.
extern test_wasi_http_own_pollable_t wasi_clocks_0_2_0_rc_2023_11_05_monotonic_clock_subscribe_instant(wasi_clocks_0_2_0_rc_2023_11_05_monotonic_clock_instant_t when);
// Create a `pollable` which will resolve once the given duration has
// elapsed, starting at the time at which this function was called.
// occured.
extern test_wasi_http_own_pollable_t wasi_clocks_0_2_0_rc_2023_11_05_monotonic_clock_subscribe_duration(wasi_clocks_0_2_0_rc_2023_11_05_monotonic_clock_duration_t when);

// Imported Functions from `wasi:clocks/timezone@0.2.0-rc-2023-11-05`
// Return information needed to display the given `datetime`. This includes
// the UTC offset, the time zone name, and a flag indicating whether
// daylight saving time is active.
// 
// If the timezone cannot be determined for the given `datetime`, return a
// `timezone-display` for `UTC` with a `utc-offset` of 0 and no daylight
// saving time.
extern void wasi_clocks_0_2_0_rc_2023_11_05_timezone_display(wasi_clocks_0_2_0_rc_2023_11_05_timezone_datetime_t *when, wasi_clocks_0_2_0_rc_2023_11_05_timezone_timezone_display_t *ret);
// The same as `display`, but only return the UTC offset.
extern int32_t wasi_clocks_0_2_0_rc_2023_11_05_timezone_utc_offset(wasi_clocks_0_2_0_rc_2023_11_05_timezone_datetime_t *when);

// Imported Functions from `wasi:random/random@0.2.0-rc-2023-11-05`
// Return `len` cryptographically-secure random or pseudo-random bytes.
// 
// This function must produce data at least as cryptographically secure and
// fast as an adequately seeded cryptographically-secure pseudo-random
// number generator (CSPRNG). It must not block, from the perspective of
// the calling program, under any circumstances, including on the first
// request and on requests for numbers of bytes. The returned data must
// always be unpredictable.
// 
// This function must always return fresh data. Deterministic environments
// must omit this function, rather than implementing it with deterministic
// data.
extern void wasi_random_0_2_0_rc_2023_11_05_random_get_random_bytes(uint64_t len, test_wasi_http_list_u8_t *ret);
// Return a cryptographically-secure random or pseudo-random `u64` value.
// 
// This function returns the same type of data as `get-random-bytes`,
// represented as a `u64`.
extern uint64_t wasi_random_0_2_0_rc_2023_11_05_random_get_random_u64(void);

// Imported Functions from `wasi:io/streams@0.2.0-rc-2023-11-05`
// Returns a string that's suitable to assist humans in debugging this
// error.
// 
// The returned string will change across platforms and hosts which
// means that parsing it, for example, would be a
// platform-compatibility hazard.
extern void wasi_io_0_2_0_rc_2023_11_05_streams_method_error_to_debug_string(test_wasi_http_borrow_error_t self, test_wasi_http_string_t *ret);
// Perform a non-blocking read from the stream.
// 
// This function returns a list of bytes containing the data that was
// read, along with a `stream-status` which, indicates whether further
// reads are expected to produce data. The returned list will contain up to
// `len` bytes; it may return fewer than requested, but not more. An
// empty list and `stream-status:open` indicates no more data is
// available at this time, and that the pollable given by `subscribe`
// will be ready when more data is available.
// 
// Once a stream has reached the end, subsequent calls to `read` or
// `skip` will always report `stream-status:ended` rather than producing more
// data.
// 
// When the caller gives a `len` of 0, it represents a request to read 0
// bytes. This read should  always succeed and return an empty list and
// the current `stream-status`.
// 
// The `len` parameter is a `u64`, which could represent a list of u8 which
// is not possible to allocate in wasm32, or not desirable to allocate as
// as a return value by the callee. The callee may return a list of bytes
// less than `len` in size while more bytes are available for reading.
extern bool wasi_io_0_2_0_rc_2023_11_05_streams_method_input_stream_read(test_wasi_http_borrow_input_stream_t self, uint64_t len, test_wasi_http_list_u8_t *ret, wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t *err);
// Read bytes from a stream, after blocking until at least one byte can
// be read. Except for blocking, identical to `read`.
extern bool wasi_io_0_2_0_rc_2023_11_05_streams_method_input_stream_blocking_read(test_wasi_http_borrow_input_stream_t self, uint64_t len, test_wasi_http_list_u8_t *ret, wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t *err);
// Skip bytes from a stream.
// 
// This is similar to the `read` function, but avoids copying the
// bytes into the instance.
// 
// Once a stream has reached the end, subsequent calls to read or
// `skip` will always report end-of-stream rather than producing more
// data.
// 
// This function returns the number of bytes skipped, along with a
// `stream-status` indicating whether the end of the stream was
// reached. The returned value will be at most `len`; it may be less.
extern bool wasi_io_0_2_0_rc_2023_11_05_streams_method_input_stream_skip(test_wasi_http_borrow_input_stream_t self, uint64_t len, uint64_t *ret, wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t *err);
// Skip bytes from a stream, after blocking until at least one byte
// can be skipped. Except for blocking behavior, identical to `skip`.
extern bool wasi_io_0_2_0_rc_2023_11_05_streams_method_input_stream_blocking_skip(test_wasi_http_borrow_input_stream_t self, uint64_t len, uint64_t *ret, wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t *err);
// Create a `pollable` which will resolve once either the specified stream
// has bytes available to read or the other end of the stream has been
// closed.
// The created `pollable` is a child resource of the `input-stream`.
// Implementations may trap if the `input-stream` is dropped before
// all derived `pollable`s created with this function are dropped.
extern test_wasi_http_own_pollable_t wasi_io_0_2_0_rc_2023_11_05_streams_method_input_stream_subscribe(test_wasi_http_borrow_input_stream_t self);
// Check readiness for writing. This function never blocks.
// 
// Returns the number of bytes permitted for the next call to `write`,
// or an error. Calling `write` with more bytes than this function has
// permitted will trap.
// 
// When this function returns 0 bytes, the `subscribe` pollable will
// become ready when this function will report at least 1 byte, or an
// error.
extern bool wasi_io_0_2_0_rc_2023_11_05_streams_method_output_stream_check_write(test_wasi_http_borrow_output_stream_t self, uint64_t *ret, wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t *err);
// Perform a write. This function never blocks.
// 
// Precondition: check-write gave permit of Ok(n) and contents has a
// length of less than or equal to n. Otherwise, this function will trap.
// 
// returns Err(closed) without writing if the stream has closed since
// the last call to check-write provided a permit.
extern bool wasi_io_0_2_0_rc_2023_11_05_streams_method_output_stream_write(test_wasi_http_borrow_output_stream_t self, test_wasi_http_list_u8_t *contents, wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t *err);
// Perform a write of up to 4096 bytes, and then flush the stream. Block
// until all of these operations are complete, or an error occurs.
// 
// This is a convenience wrapper around the use of `check-write`,
// `subscribe`, `write`, and `flush`, and is implemented with the
// following pseudo-code:
// 
// ```text
// let pollable = this.subscribe();
// while !contents.is_empty() {
  // // Wait for the stream to become writable
  // poll-one(pollable);
  // let Ok(n) = this.check-write(); // eliding error handling
  // let len = min(n, contents.len());
  // let (chunk, rest) = contents.split_at(len);
  // this.write(chunk  );            // eliding error handling
  // contents = rest;
  // }
  // this.flush();
  // // Wait for completion of `flush`
  // poll-one(pollable);
  // // Check for any errors that arose during `flush`
  // let _ = this.check-write();         // eliding error handling
  // ```
  extern bool wasi_io_0_2_0_rc_2023_11_05_streams_method_output_stream_blocking_write_and_flush(test_wasi_http_borrow_output_stream_t self, test_wasi_http_list_u8_t *contents, wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t *err);
  // Request to flush buffered output. This function never blocks.
  // 
  // This tells the output-stream that the caller intends any buffered
  // output to be flushed. the output which is expected to be flushed
  // is all that has been passed to `write` prior to this call.
  // 
  // Upon calling this function, the `output-stream` will not accept any
  // writes (`check-write` will return `ok(0)`) until the flush has
  // completed. The `subscribe` pollable will become ready when the
  // flush has completed and the stream can accept more writes.
  extern bool wasi_io_0_2_0_rc_2023_11_05_streams_method_output_stream_flush(test_wasi_http_borrow_output_stream_t self, wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t *err);
  // Request to flush buffered output, and block until flush completes
  // and stream is ready for writing again.
  extern bool wasi_io_0_2_0_rc_2023_11_05_streams_method_output_stream_blocking_flush(test_wasi_http_borrow_output_stream_t self, wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t *err);
  // Create a `pollable` which will resolve once the output-stream
  // is ready for more writing, or an error has occured. When this
  // pollable is ready, `check-write` will return `ok(n)` with n>0, or an
  // error.
  // 
  // If the stream is closed, this pollable is always ready immediately.
  // 
  // The created `pollable` is a child resource of the `output-stream`.
  // Implementations may trap if the `output-stream` is dropped before
  // all derived `pollable`s created with this function are dropped.
  extern test_wasi_http_own_pollable_t wasi_io_0_2_0_rc_2023_11_05_streams_method_output_stream_subscribe(test_wasi_http_borrow_output_stream_t self);
  // Write zeroes to a stream.
  // 
  // this should be used precisely like `write` with the exact same
  // preconditions (must use check-write first), but instead of
  // passing a list of bytes, you simply pass the number of zero-bytes
  // that should be written.
  extern bool wasi_io_0_2_0_rc_2023_11_05_streams_method_output_stream_write_zeroes(test_wasi_http_borrow_output_stream_t self, uint64_t len, wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t *err);
  // Perform a write of up to 4096 zeroes, and then flush the stream.
  // Block until all of these operations are complete, or an error
  // occurs.
  // 
  // This is a convenience wrapper around the use of `check-write`,
  // `subscribe`, `write-zeroes`, and `flush`, and is implemented with
  // the following pseudo-code:
  // 
  // ```text
  // let pollable = this.subscribe();
  // while num_zeroes != 0 {
    // // Wait for the stream to become writable
    // poll-one(pollable);
    // let Ok(n) = this.check-write(); // eliding error handling
    // let len = min(n, num_zeroes);
    // this.write-zeroes(len);         // eliding error handling
    // num_zeroes -= len;
    // }
    // this.flush();
    // // Wait for completion of `flush`
    // poll-one(pollable);
    // // Check for any errors that arose during `flush`
    // let _ = this.check-write();         // eliding error handling
    // ```
    extern bool wasi_io_0_2_0_rc_2023_11_05_streams_method_output_stream_blocking_write_zeroes_and_flush(test_wasi_http_borrow_output_stream_t self, uint64_t len, wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t *err);
    // Read from one stream and write to another.
    // 
    // The behavior of splice is equivelant to:
    // 1. calling `check-write` on the `output-stream`
    // 2. calling `read` on the `input-stream` with the smaller of the
    // `check-write` permitted length and the `len` provided to `splice`
    // 3. calling `write` on the `output-stream` with that read data.
    // 
    // Any error reported by the call to `check-write`, `read`, or
    // `write` ends the splice and reports that error.
    // 
    // This function returns the number of bytes transferred; it may be less
    // than `len`.
    extern bool wasi_io_0_2_0_rc_2023_11_05_streams_method_output_stream_splice(test_wasi_http_borrow_output_stream_t self, test_wasi_http_borrow_input_stream_t src, uint64_t len, uint64_t *ret, wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t *err);
    // Read from one stream and write to another, with blocking.
    // 
    // This is similar to `splice`, except that it blocks until the
    // `output-stream` is ready for writing, and the `input-stream`
    // is ready for reading, before performing the `splice`.
    extern bool wasi_io_0_2_0_rc_2023_11_05_streams_method_output_stream_blocking_splice(test_wasi_http_borrow_output_stream_t self, test_wasi_http_borrow_input_stream_t src, uint64_t len, uint64_t *ret, wasi_io_0_2_0_rc_2023_11_05_streams_stream_error_t *err);
    
    // Imported Functions from `wasi:cli/stdout@0.2.0-rc-2023-11-05`
    extern test_wasi_http_own_output_stream_t wasi_cli_0_2_0_rc_2023_11_05_stdout_get_stdout(void);
    
    // Imported Functions from `wasi:cli/stderr@0.2.0-rc-2023-11-05`
    extern test_wasi_http_own_output_stream_t wasi_cli_0_2_0_rc_2023_11_05_stderr_get_stderr(void);
    
    // Imported Functions from `wasi:cli/stdin@0.2.0-rc-2023-11-05`
    extern test_wasi_http_own_input_stream_t wasi_cli_0_2_0_rc_2023_11_05_stdin_get_stdin(void);
    
    // Imported Functions from `wasi:http/types@0.2.0-rc-2023-11-05`
    // Construct an empty HTTP Fields.
    extern test_wasi_http_own_fields_t wasi_http_0_2_0_rc_2023_11_05_types_constructor_fields(void);
    // Construct an HTTP Fields.
    // 
    // The list represents each key-value pair in the Fields. Keys
    // which have multiple values are represented by multiple entries in this
    // list with the same key.
    // 
    // The tuple is a pair of the field key, represented as a string, and
    // Value, represented as a list of bytes. In a valid Fields, all keys
    // and values are valid UTF-8 strings. However, values are not always
    // well-formed, so they are represented as a raw list of bytes.
    // 
    // An error result will be returned if any header or value was
    // syntactically invalid, or if a header was forbidden.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_static_fields_from_list(test_wasi_http_list_tuple2_wasi_http_0_2_0_rc_2023_11_05_types_field_key_wasi_http_0_2_0_rc_2023_11_05_types_field_value_t *entries, test_wasi_http_own_fields_t *ret, wasi_http_0_2_0_rc_2023_11_05_types_header_error_t *err);
    // Get all of the values corresponding to a key.
    extern void wasi_http_0_2_0_rc_2023_11_05_types_method_fields_get(test_wasi_http_borrow_fields_t self, wasi_http_0_2_0_rc_2023_11_05_types_field_key_t *name, test_wasi_http_list_wasi_http_0_2_0_rc_2023_11_05_types_field_value_t *ret);
    // Set all of the values for a key. Clears any existing values for that
    // key, if they have been set.
    // 
    // The operation can fail if the name or value arguments are invalid, or if
    // the name is forbidden.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_fields_set(test_wasi_http_borrow_fields_t self, wasi_http_0_2_0_rc_2023_11_05_types_field_key_t *name, test_wasi_http_list_wasi_http_0_2_0_rc_2023_11_05_types_field_value_t *value, wasi_http_0_2_0_rc_2023_11_05_types_header_error_t *err);
    // Delete all values for a key. Does nothing if no values for the key
    // exist.
    extern void wasi_http_0_2_0_rc_2023_11_05_types_method_fields_delete(test_wasi_http_borrow_fields_t self, wasi_http_0_2_0_rc_2023_11_05_types_field_key_t *name);
    // Append a value for a key. Does not change or delete any existing
    // values for that key.
    // 
    // The operation can fail if the name or value arguments are invalid, or if
    // the name is forbidden.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_fields_append(test_wasi_http_borrow_fields_t self, wasi_http_0_2_0_rc_2023_11_05_types_field_key_t *name, wasi_http_0_2_0_rc_2023_11_05_types_field_value_t *value, wasi_http_0_2_0_rc_2023_11_05_types_header_error_t *err);
    // Retrieve the full set of keys and values in the Fields. Like the
    // constructor, the list represents each key-value pair.
    // 
    // The outer list represents each key-value pair in the Fields. Keys
    // which have multiple values are represented by multiple entries in this
    // list with the same key.
    extern void wasi_http_0_2_0_rc_2023_11_05_types_method_fields_entries(test_wasi_http_borrow_fields_t self, test_wasi_http_list_tuple2_wasi_http_0_2_0_rc_2023_11_05_types_field_key_wasi_http_0_2_0_rc_2023_11_05_types_field_value_t *ret);
    // Make a deep copy of the Fields. Equivelant in behavior to calling the
    // `fields` constructor on the return value of `entries`
    extern test_wasi_http_own_fields_t wasi_http_0_2_0_rc_2023_11_05_types_method_fields_clone(test_wasi_http_borrow_fields_t self);
    // Returns the method of the incoming request.
    extern void wasi_http_0_2_0_rc_2023_11_05_types_method_incoming_request_method(test_wasi_http_borrow_incoming_request_t self, wasi_http_0_2_0_rc_2023_11_05_types_method_t *ret);
    // Returns the path with query parameters from the request, as a string.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_incoming_request_path_with_query(test_wasi_http_borrow_incoming_request_t self, test_wasi_http_string_t *ret);
    // Returns the protocol scheme from the request.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_incoming_request_scheme(test_wasi_http_borrow_incoming_request_t self, wasi_http_0_2_0_rc_2023_11_05_types_scheme_t *ret);
    // Returns the authority from the request, if it was present.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_incoming_request_authority(test_wasi_http_borrow_incoming_request_t self, test_wasi_http_string_t *ret);
    // Returns the `headers` from the request.
    // 
    // The `headers` returned are a child resource: it must be dropped before
    // the parent `incoming-request` is dropped. Dropping this
    // `incoming-request` before all children are dropped will trap.
    extern test_wasi_http_own_headers_t wasi_http_0_2_0_rc_2023_11_05_types_method_incoming_request_headers(test_wasi_http_borrow_incoming_request_t self);
    // Gives the `incoming-body` associated with this request. Will only
    // return success at most once, and subsequent calls will return error.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_incoming_request_consume(test_wasi_http_borrow_incoming_request_t self, test_wasi_http_own_incoming_body_t *ret);
    // Construct a new `outgoing-request` with a default `method` of `GET`, and
    // default values for `path-with-query`, `scheme`, and `authority.
    // 
    // * `headers` is the HTTP Headers for the Request.
    // 
    // It is possible to construct, or manipulate with the accessor functions
    // below, an `outgoing-request` with an invalid combination of `scheme`
    // and `authority`, or `headers` which are not permitted to be sent.
    // It is the obligation of the `outgoing-handler.handle` implementation
    // to reject invalid constructions of `outgoing-request`.
    extern test_wasi_http_own_outgoing_request_t wasi_http_0_2_0_rc_2023_11_05_types_constructor_outgoing_request(test_wasi_http_own_headers_t headers);
    // Returns the resource corresponding to the outgoing Body for this
    // Request.
    // 
    // Returns success on the first call: the `outgoing-body` resource for
    // this `outgoing-response` can be retrieved at most once. Subsequent
    // calls will return error.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_request_body(test_wasi_http_borrow_outgoing_request_t self, test_wasi_http_own_outgoing_body_t *ret);
    // Get the Method for the Request.
    extern void wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_request_method(test_wasi_http_borrow_outgoing_request_t self, wasi_http_0_2_0_rc_2023_11_05_types_method_t *ret);
    // Set the Method for the Request. Fails if the string present in a
    // `method.other` argument is not a syntactically valid method.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_request_set_method(test_wasi_http_borrow_outgoing_request_t self, wasi_http_0_2_0_rc_2023_11_05_types_method_t *method);
    // Get the combination of the HTTP Path and Query for the Request.
    // When `none`, this represents an empty Path and empty Query.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_request_path_with_query(test_wasi_http_borrow_outgoing_request_t self, test_wasi_http_string_t *ret);
    // Set the combination of the HTTP Path and Query for the Request.
    // When `none`, this represents an empty Path and empty Query. Fails is the
    // string given is not a syntactically valid path and query uri component.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_request_set_path_with_query(test_wasi_http_borrow_outgoing_request_t self, test_wasi_http_string_t *maybe_path_with_query);
    // Get the HTTP Related Scheme for the Request. When `none`, the
    // implementation may choose an appropriate default scheme.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_request_scheme(test_wasi_http_borrow_outgoing_request_t self, wasi_http_0_2_0_rc_2023_11_05_types_scheme_t *ret);
    // Set the HTTP Related Scheme for the Request. When `none`, the
    // implementation may choose an appropriate default scheme. Fails if the
    // string given is not a syntactically valid uri scheme.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_request_set_scheme(test_wasi_http_borrow_outgoing_request_t self, wasi_http_0_2_0_rc_2023_11_05_types_scheme_t *maybe_scheme);
    // Get the HTTP Authority for the Request. A value of `none` may be used
    // with Related Schemes which do not require an Authority. The HTTP and
    // HTTPS schemes always require an authority.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_request_authority(test_wasi_http_borrow_outgoing_request_t self, test_wasi_http_string_t *ret);
    // Set the HTTP Authority for the Request. A value of `none` may be used
    // with Related Schemes which do not require an Authority. The HTTP and
    // HTTPS schemes always require an authority. Fails if the string given is
    // not a syntactically valid uri authority.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_request_set_authority(test_wasi_http_borrow_outgoing_request_t self, test_wasi_http_string_t *maybe_authority);
    // Get the headers associated with the Request.
    // 
    // This headers resource is a child: it must be dropped before the parent
    // `outgoing-request` is dropped, or its ownership is transfered to
    // another component by e.g. `outgoing-handler.handle`.
    extern test_wasi_http_own_headers_t wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_request_headers(test_wasi_http_borrow_outgoing_request_t self);
    // Construct a default `request-options` value.
    extern test_wasi_http_own_request_options_t wasi_http_0_2_0_rc_2023_11_05_types_constructor_request_options(void);
    // The timeout for the initial connect to the HTTP Server.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_request_options_connect_timeout_ms(test_wasi_http_borrow_request_options_t self, wasi_http_0_2_0_rc_2023_11_05_types_duration_t *ret);
    // Set the timeout for the initial connect to the HTTP Server. An error
    // return value indicates that this timeout is not supported.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_request_options_set_connect_timeout_ms(test_wasi_http_borrow_request_options_t self, wasi_http_0_2_0_rc_2023_11_05_types_duration_t *maybe_ms);
    // The timeout for receiving the first byte of the Response body.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_request_options_first_byte_timeout_ms(test_wasi_http_borrow_request_options_t self, wasi_http_0_2_0_rc_2023_11_05_types_duration_t *ret);
    // Set the timeout for receiving the first byte of the Response body. An
    // error return value indicates that this timeout is not supported.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_request_options_set_first_byte_timeout_ms(test_wasi_http_borrow_request_options_t self, wasi_http_0_2_0_rc_2023_11_05_types_duration_t *maybe_ms);
    // The timeout for receiving subsequent chunks of bytes in the Response
    // body stream.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_request_options_between_bytes_timeout_ms(test_wasi_http_borrow_request_options_t self, wasi_http_0_2_0_rc_2023_11_05_types_duration_t *ret);
    // Set the timeout for receiving subsequent chunks of bytes in the Response
    // body stream. An error return value indicates that this timeout is not
    // supported.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_request_options_set_between_bytes_timeout_ms(test_wasi_http_borrow_request_options_t self, wasi_http_0_2_0_rc_2023_11_05_types_duration_t *maybe_ms);
    // Set the value of the `response-outparam` to either send a response,
    // or indicate an error.
    // 
    // This method consumes the `response-outparam` to ensure that it is
    // called at most once. If it is never called, the implementation
    // will respond with an error.
    // 
    // The user may provide an `error` to `response` to allow the
    // implementation determine how to respond with an HTTP error response.
    extern void wasi_http_0_2_0_rc_2023_11_05_types_static_response_outparam_set(test_wasi_http_own_response_outparam_t param, test_wasi_http_result_own_outgoing_response_wasi_http_0_2_0_rc_2023_11_05_types_error_t *response);
    // Returns the status code from the incoming response.
    extern wasi_http_0_2_0_rc_2023_11_05_types_status_code_t wasi_http_0_2_0_rc_2023_11_05_types_method_incoming_response_status(test_wasi_http_borrow_incoming_response_t self);
    // Returns the headers from the incoming response.
    extern test_wasi_http_own_headers_t wasi_http_0_2_0_rc_2023_11_05_types_method_incoming_response_headers(test_wasi_http_borrow_incoming_response_t self);
    // Returns the incoming body. May be called at most once. Returns error
    // if called additional times.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_incoming_response_consume(test_wasi_http_borrow_incoming_response_t self, test_wasi_http_own_incoming_body_t *ret);
    // Returns the contents of the body, as a stream of bytes.
    // 
    // Returns success on first call: the stream representing the contents
    // can be retrieved at most once. Subsequent calls will return error.
    // 
    // The returned `input-stream` resource is a child: it must be dropped
    // before the parent `incoming-body` is dropped, or consumed by
    // `incoming-body.finish`.
    // 
    // This invariant ensures that the implementation can determine whether
    // the user is consuming the contents of the body, waiting on the
    // `future-trailers` to be ready, or neither. This allows for network
    // backpressure is to be applied when the user is consuming the body,
    // and for that backpressure to not inhibit delivery of the trailers if
    // the user does not read the entire body.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_incoming_body_stream(test_wasi_http_borrow_incoming_body_t self, test_wasi_http_own_input_stream_t *ret);
    // Takes ownership of `incoming-body`, and returns a `future-trailers`.
    // This function will trap if the `input-stream` child is still alive.
    extern test_wasi_http_own_future_trailers_t wasi_http_0_2_0_rc_2023_11_05_types_static_incoming_body_finish(test_wasi_http_own_incoming_body_t this_);
    // Returns a pollable which becomes ready when either the trailers have
    // been received, or an error has occured. When this pollable is ready,
    // the `get` method will return `some`.
    extern test_wasi_http_own_pollable_t wasi_http_0_2_0_rc_2023_11_05_types_method_future_trailers_subscribe(test_wasi_http_borrow_future_trailers_t self);
    // Returns the contents of the trailers, or an error which occured,
    // once the future is ready.
    // 
    // The outer `option` represents future readiness. Users can wait on this
    // `option` to become `some` using the `subscribe` method.
    // 
    // The `result` represents that either the HTTP Request or Response body,
    // as well as any trailers, were received successfully, or that an error
    // occured receiving them. The optional `trailers` indicates whether or not
    // trailers were present in the body.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_future_trailers_get(test_wasi_http_borrow_future_trailers_t self, test_wasi_http_result_option_own_trailers_wasi_http_0_2_0_rc_2023_11_05_types_error_t *ret);
    // Construct an `outgoing-response`, with a default `status-code` of `200`.
    // If a different `status-code` is needed, it must be set via the
    // `set-status-code` method.
    // 
    // * `headers` is the HTTP Headers for the Response.
    extern test_wasi_http_own_outgoing_response_t wasi_http_0_2_0_rc_2023_11_05_types_constructor_outgoing_response(test_wasi_http_own_headers_t headers);
    // Get the HTTP Status Code for the Response.
    extern wasi_http_0_2_0_rc_2023_11_05_types_status_code_t wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_response_status_code(test_wasi_http_borrow_outgoing_response_t self);
    // Set the HTTP Status Code for the Response. Fails if the status-code
    // given is not a valid http status code.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_response_set_status_code(test_wasi_http_borrow_outgoing_response_t self, wasi_http_0_2_0_rc_2023_11_05_types_status_code_t status_code);
    // Get the headers associated with the Request.
    // 
    // This headers resource is a child: it must be dropped before the parent
    // `outgoing-request` is dropped, or its ownership is transfered to
    // another component by e.g. `outgoing-handler.handle`.
    extern test_wasi_http_own_headers_t wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_response_headers(test_wasi_http_borrow_outgoing_response_t self);
    // Returns the resource corresponding to the outgoing Body for this Response.
    // 
    // Returns success on the first call: the `outgoing-body` resource for
    // this `outgoing-response` can be retrieved at most once. Subsequent
    // calls will return error.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_response_body(test_wasi_http_borrow_outgoing_response_t self, test_wasi_http_own_outgoing_body_t *ret);
    // Returns a stream for writing the body contents.
    // 
    // The returned `output-stream` is a child resource: it must be dropped
    // before the parent `outgoing-body` resource is dropped (or finished),
    // otherwise the `outgoing-body` drop or `finish` will trap.
    // 
    // Returns success on the first call: the `output-stream` resource for
    // this `outgoing-body` may be retrieved at most once. Subsequent calls
    // will return error.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_outgoing_body_write(test_wasi_http_borrow_outgoing_body_t self, test_wasi_http_own_output_stream_t *ret);
    // Finalize an outgoing body, optionally providing trailers. This must be
    // called to signal that the response is complete. If the `outgoing-body`
    // is dropped without calling `outgoing-body.finalize`, the implementation
    // should treat the body as corrupted.
    extern void wasi_http_0_2_0_rc_2023_11_05_types_static_outgoing_body_finish(test_wasi_http_own_outgoing_body_t this_, test_wasi_http_own_trailers_t *maybe_trailers);
    // Returns a pollable which becomes ready when either the Response has
    // been received, or an error has occured. When this pollable is ready,
    // the `get` method will return `some`.
    extern test_wasi_http_own_pollable_t wasi_http_0_2_0_rc_2023_11_05_types_method_future_incoming_response_subscribe(test_wasi_http_borrow_future_incoming_response_t self);
    // Returns the incoming HTTP Response, or an error, once one is ready.
    // 
    // The outer `option` represents future readiness. Users can wait on this
    // `option` to become `some` using the `subscribe` method.
    // 
    // The outer `result` is used to retrieve the response or error at most
    // once. It will be success on the first call in which the outer option
    // is `some`, and error on subsequent calls.
    // 
    // The inner `result` represents that either the incoming HTTP Response
    // status and headers have recieved successfully, or that an error
    // occured. Errors may also occur while consuming the response body,
    // but those will be reported by the `incoming-body` and its
    // `output-stream` child.
    extern bool wasi_http_0_2_0_rc_2023_11_05_types_method_future_incoming_response_get(test_wasi_http_borrow_future_incoming_response_t self, test_wasi_http_result_result_own_incoming_response_wasi_http_0_2_0_rc_2023_11_05_types_error_void_t *ret);
    
    // Imported Functions from `wasi:http/outgoing-handler@0.2.0-rc-2023-11-05`
    // This function is invoked with an outgoing HTTP Request, and it returns
    // a resource `future-incoming-response` which represents an HTTP Response
    // which may arrive in the future.
    // 
    // The `options` argument accepts optional parameters for the HTTP
    // protocol's transport layer.
    // 
    // This function may return an error if the `outgoing-request` is invalid
    // or not allowed to be made. Otherwise, protocol errors are reported
    // through the `future-incoming-response`.
    extern bool wasi_http_0_2_0_rc_2023_11_05_outgoing_handler_handle(test_wasi_http_own_outgoing_request_t request, test_wasi_http_own_request_options_t *maybe_options, test_wasi_http_own_future_incoming_response_t *ret, wasi_http_0_2_0_rc_2023_11_05_outgoing_handler_error_t *err);
    
    // Exported Functions from `wasi:http/incoming-handler@0.2.0-rc-2023-11-05`
    void exports_wasi_http_0_2_0_rc_2023_11_05_incoming_handler_handle(test_wasi_http_own_incoming_request_t request, test_wasi_http_own_response_outparam_t response_out);
    
    // Functions for working with resource `wasi:http/types@0.2.0-rc-2023-11-05/incoming-request`
    test_wasi_http_borrow_incoming_request_t wasi_http_0_2_0_rc_2023_11_05_types_borrow_incoming_request(test_wasi_http_own_incoming_request_t);
    void wasi_http_0_2_0_rc_2023_11_05_types_incoming_request_drop_own(test_wasi_http_own_incoming_request_t);
    extern void test_wasi_http_incoming_request_drop_borrow(test_wasi_http_borrow_incoming_request_t);
    
    // Functions for working with resource `wasi:http/types@0.2.0-rc-2023-11-05/outgoing-response`
    test_wasi_http_borrow_outgoing_response_t wasi_http_0_2_0_rc_2023_11_05_types_borrow_outgoing_response(test_wasi_http_own_outgoing_response_t);
    void wasi_http_0_2_0_rc_2023_11_05_types_outgoing_response_drop_own(test_wasi_http_own_outgoing_response_t);
    extern void test_wasi_http_outgoing_response_drop_borrow(test_wasi_http_borrow_outgoing_response_t);
    
    // Functions for working with resource `wasi:http/types@0.2.0-rc-2023-11-05/fields`
    test_wasi_http_borrow_fields_t wasi_http_0_2_0_rc_2023_11_05_types_borrow_fields(test_wasi_http_own_fields_t);
    void wasi_http_0_2_0_rc_2023_11_05_types_fields_drop_own(test_wasi_http_own_fields_t);
    extern void test_wasi_http_fields_drop_borrow(test_wasi_http_borrow_fields_t);
    
    // Functions for working with resource `wasi:http/types@0.2.0-rc-2023-11-05/request-options`
    test_wasi_http_borrow_request_options_t wasi_http_0_2_0_rc_2023_11_05_types_borrow_request_options(test_wasi_http_own_request_options_t);
    void wasi_http_0_2_0_rc_2023_11_05_types_request_options_drop_own(test_wasi_http_own_request_options_t);
    extern void test_wasi_http_request_options_drop_borrow(test_wasi_http_borrow_request_options_t);
    
    // Functions for working with resource `wasi:io/streams@0.2.0-rc-2023-11-05/error`
    test_wasi_http_borrow_error_t wasi_io_0_2_0_rc_2023_11_05_streams_borrow_error(test_wasi_http_own_error_t);
    void wasi_io_0_2_0_rc_2023_11_05_streams_error_drop_own(test_wasi_http_own_error_t);
    extern void test_wasi_http_error_drop_borrow(test_wasi_http_borrow_error_t);
    
    // Functions for working with resource `wasi:http/types@0.2.0-rc-2023-11-05/future-trailers`
    test_wasi_http_borrow_future_trailers_t wasi_http_0_2_0_rc_2023_11_05_types_borrow_future_trailers(test_wasi_http_own_future_trailers_t);
    void wasi_http_0_2_0_rc_2023_11_05_types_future_trailers_drop_own(test_wasi_http_own_future_trailers_t);
    extern void test_wasi_http_future_trailers_drop_borrow(test_wasi_http_borrow_future_trailers_t);
    
    // Functions for working with resource `wasi:http/types@0.2.0-rc-2023-11-05/response-outparam`
    void wasi_http_0_2_0_rc_2023_11_05_types_response_outparam_drop_own(test_wasi_http_own_response_outparam_t);
    
    // Functions for working with resource `wasi:http/types@0.2.0-rc-2023-11-05/incoming-body`
    test_wasi_http_borrow_incoming_body_t wasi_http_0_2_0_rc_2023_11_05_types_borrow_incoming_body(test_wasi_http_own_incoming_body_t);
    void wasi_http_0_2_0_rc_2023_11_05_types_incoming_body_drop_own(test_wasi_http_own_incoming_body_t);
    extern void test_wasi_http_incoming_body_drop_borrow(test_wasi_http_borrow_incoming_body_t);
    
    // Functions for working with resource `wasi:http/types@0.2.0-rc-2023-11-05/future-incoming-response`
    test_wasi_http_borrow_future_incoming_response_t wasi_http_0_2_0_rc_2023_11_05_types_borrow_future_incoming_response(test_wasi_http_own_future_incoming_response_t);
    void wasi_http_0_2_0_rc_2023_11_05_types_future_incoming_response_drop_own(test_wasi_http_own_future_incoming_response_t);
    extern void test_wasi_http_future_incoming_response_drop_borrow(test_wasi_http_borrow_future_incoming_response_t);
    
    // Functions for working with resource `wasi:http/types@0.2.0-rc-2023-11-05/outgoing-request`
    test_wasi_http_borrow_outgoing_request_t wasi_http_0_2_0_rc_2023_11_05_types_borrow_outgoing_request(test_wasi_http_own_outgoing_request_t);
    void wasi_http_0_2_0_rc_2023_11_05_types_outgoing_request_drop_own(test_wasi_http_own_outgoing_request_t);
    extern void test_wasi_http_outgoing_request_drop_borrow(test_wasi_http_borrow_outgoing_request_t);
    
    // Functions for working with resource `wasi:http/types@0.2.0-rc-2023-11-05/incoming-response`
    test_wasi_http_borrow_incoming_response_t wasi_http_0_2_0_rc_2023_11_05_types_borrow_incoming_response(test_wasi_http_own_incoming_response_t);
    void wasi_http_0_2_0_rc_2023_11_05_types_incoming_response_drop_own(test_wasi_http_own_incoming_response_t);
    extern void test_wasi_http_incoming_response_drop_borrow(test_wasi_http_borrow_incoming_response_t);
    
    // Functions for working with resource `wasi:io/poll@0.2.0-rc-2023-11-05/pollable`
    test_wasi_http_borrow_pollable_t wasi_io_0_2_0_rc_2023_11_05_poll_borrow_pollable(test_wasi_http_own_pollable_t);
    void wasi_io_0_2_0_rc_2023_11_05_poll_pollable_drop_own(test_wasi_http_own_pollable_t);
    extern void test_wasi_http_pollable_drop_borrow(test_wasi_http_borrow_pollable_t);
    
    // Functions for working with resource `wasi:io/streams@0.2.0-rc-2023-11-05/output-stream`
    test_wasi_http_borrow_output_stream_t wasi_io_0_2_0_rc_2023_11_05_streams_borrow_output_stream(test_wasi_http_own_output_stream_t);
    void wasi_io_0_2_0_rc_2023_11_05_streams_output_stream_drop_own(test_wasi_http_own_output_stream_t);
    extern void test_wasi_http_output_stream_drop_borrow(test_wasi_http_borrow_output_stream_t);
    
    // Functions for working with resource `wasi:http/types@0.2.0-rc-2023-11-05/outgoing-body`
    test_wasi_http_borrow_outgoing_body_t wasi_http_0_2_0_rc_2023_11_05_types_borrow_outgoing_body(test_wasi_http_own_outgoing_body_t);
    void wasi_http_0_2_0_rc_2023_11_05_types_outgoing_body_drop_own(test_wasi_http_own_outgoing_body_t);
    extern void test_wasi_http_outgoing_body_drop_borrow(test_wasi_http_borrow_outgoing_body_t);
    
    // Functions for working with resource `wasi:io/streams@0.2.0-rc-2023-11-05/input-stream`
    test_wasi_http_borrow_input_stream_t wasi_io_0_2_0_rc_2023_11_05_streams_borrow_input_stream(test_wasi_http_own_input_stream_t);
    void wasi_io_0_2_0_rc_2023_11_05_streams_input_stream_drop_own(test_wasi_http_own_input_stream_t);
    extern void test_wasi_http_input_stream_drop_borrow(test_wasi_http_borrow_input_stream_t);
    
    #ifdef __cplusplus
  }
  #endif
  #endif
  